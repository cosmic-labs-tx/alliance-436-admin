datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model User {
  id                    String                 @id @default(cuid())
  username              String                 @unique
  password              Password?
  passwordResets        PasswordReset[]
  role                  UserRole               @default(USER)
  contact               Contact                @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId             String                 @unique
  account               Account?               @relation(fields: [accountId], references: [id])
  accountId             String?                @unique
  isActive              Boolean                @default(true)
  receipts              Receipt[]
  reimbursementRequests ReimbursementRequest[]
  engagements           Engagement[]
  contactAssignments    ContactAssigment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordReset {
  id        String    @id @default(cuid())
  token     String    @unique @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  usedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id       String    @id @default(cuid())
  name     String
  accounts Account[]
  isActive Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                    String                 @id @default(cuid())
  code                  String                 @unique
  description           String                 @db.Text
  user                  User?
  organization          Organization?          @relation(fields: [organizationId], references: [id])
  organizationId        String?
  transactions          Transaction[]
  type                  AccountType            @relation(fields: [typeId], references: [id])
  typeId                Int
  reimbursementRequests ReimbursementRequest[]
  subscribers           AccountSubscription[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  accounts Account[]
}

model AccountSubscription {
  id           Int     @id @default(autoincrement())
  account      Account @relation(fields: [accountId], references: [id])
  accountId    String
  subscriber   Contact @relation(fields: [subscriberId], references: [id])
  subscriberId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id               String            @id @default(cuid())
  date             DateTime
  amountInCents    Int
  description      String?           @db.Text
  account          Account           @relation(fields: [accountId], references: [id])
  accountId        String
  contact          Contact?          @relation(fields: [contactId], references: [id])
  contactId        String?
  transactionItems TransactionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionItem {
  id            String                 @id @default(cuid())
  amountInCents Int
  transaction   Transaction            @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String
  description   String?                @db.Text
  method        TransactionItemMethod? @relation(fields: [methodId], references: [id])
  methodId      Int?
  type          TransactionItemType    @relation(fields: [typeId], references: [id])
  typeId        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionItemMethod {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  transactionItems      TransactionItem[]
  reimbursementRequests ReimbursementRequest[]
}

model TransactionItemType {
  id               Int                           @id @default(autoincrement())
  name             String                        @unique
  direction        TransactionItemTypeDirection? @default(IN)
  transactionItems TransactionItem[]
}

enum TransactionItemTypeDirection {
  IN
  OUT
}

model ReimbursementRequest {
  id            String                     @id @default(cuid())
  amountInCents Int
  date          DateTime
  vendor        String?
  description   String?                    @db.Text
  user          User                       @relation(fields: [userId], references: [id])
  userId        String
  account       Account                    @relation(fields: [accountId], references: [id])
  accountId     String
  method        TransactionItemMethod      @relation(fields: [methodId], references: [id])
  methodId      Int
  status        ReimbursementRequestStatus @default(PENDING)
  receipts      Receipt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Receipt {
  id                    String                 @id @default(cuid())
  s3Key                 String
  s3Url                 String?                @db.Text
  s3UrlExpiry           DateTime?
  title                 String
  user                  User                   @relation(fields: [userId], references: [id])
  userId                String
  reimbursementRequests ReimbursementRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReimbursementRequestStatus {
  PENDING
  APPROVED
  REJECTED
  VOID
}

model Contact {
  id                   String                @id @default(cuid())
  email                String?               @unique
  firstName            String?
  lastName             String?
  organizationName     String?
  phone                String?
  address              Address?
  isActive             Boolean               @default(true)
  type                 ContactType           @relation(fields: [typeId], references: [id])
  typeId               Int
  user                 User?
  transactions         Transaction[]
  engagements          Engagement[]
  accountSubscriptions AccountSubscription[]
  assignedUsers        ContactAssigment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  contacts Contact[]
}

model ContactAssigment {
  id        Int     @id @default(autoincrement())
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        String  @id @default(cuid())
  street    String
  street2   String?
  city      String
  state     String
  zip       String
  country   String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String  @unique
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Engagement {
  id          Int            @id @default(autoincrement())
  date        DateTime
  description String?        @db.Text
  type        EngagementType @relation(fields: [typeId], references: [id])
  typeId      Int
  contact     Contact        @relation(fields: [contactId], references: [id])
  contactId   String
  user        User           @relation(fields: [userId], references: [id])
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EngagementType {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  engagements Engagement[]
}

model Announcement {
  id        Int       @id @default(autoincrement())
  title     String
  content   String    @db.Text
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
