datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  role           UserRole        @default(USER)
  password       Password?
  passwordResets PasswordReset[]
  contact        Contact         @relation(fields: [contactId], references: [id])
  contactId      String          @unique
  account        Account?
  isActive       Boolean         @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordReset {
  id        String    @id @default(cuid())
  token     String    @unique @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  usedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id       String    @id @default(cuid())
  name     String
  accounts Account[]
  isActive Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id             String        @id @default(cuid())
  code           String        @unique
  description    String
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  transactions   Transaction[]
  type           AccountType   @relation(fields: [typeId], references: [id])
  typeId         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id               String            @id @default(cuid())
  date             DateTime
  amount           Int
  account          Account           @relation(fields: [accountId], references: [id])
  accountId        String
  description      String?
  transactionItems TransactionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionItem {
  id            String                 @id @default(cuid())
  amount        Int
  transaction   Transaction            @relation(fields: [transactionId], references: [id])
  transactionId String
  description   String?
  contact       Contact?               @relation(fields: [contactId], references: [id])
  contactId     String?
  method        TransactionItemMethod? @relation(fields: [methodId], references: [id])
  methodId      Int?
  type          TransactionItemType    @relation(fields: [typeId], references: [id])
  typeId        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionItemMethod {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  transactionItems TransactionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionItemType {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  transactionItems TransactionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reimbursement {
  id     String              @id @default(cuid())
  amount Int
  status ReimbursementStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReimbursementStatus {
  PENDING
  APPROVED
  REJECTED
  VOID
}

model Contact {
  id               String            @id @default(cuid())
  email            String            @unique
  firstName        String?
  lastName         String?
  phone            String?
  address          Address?
  isActive         Boolean           @default(true)
  type             ContactType       @relation(fields: [typeId], references: [id])
  typeId           Int
  user             User?
  userId           String?
  transactionItems TransactionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  contacts Contact[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        String  @id @default(cuid())
  street    String
  street2   String?
  city      String
  state     String
  zip       String
  country   String
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId String  @unique
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
