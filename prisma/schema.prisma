datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  role           UserRole        @default(USER)
  email          String          @unique
  firstName      String?
  lastName       String?
  password       Password?
  passwordResets PasswordReset[]
  account        Account?
  isActive       Boolean         @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
  OWNER
  ACCOUNTANT
  SUPERADMIN
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model PasswordReset {
  id        String    @id @default(cuid())
  token     String    @unique @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  usedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id       String    @id @default(cuid())
  name     String
  accounts Account[]
  isActive Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id             String        @id @default(cuid())
  name           String
  userId         String        @unique
  user           User          @relation(fields: [userId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  transactions   Transaction[]
  isActive       Boolean       @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id               String            @id @default(cuid())
  date             DateTime
  amount           Int
  account          Account           @relation(fields: [accountId], references: [id])
  accountId        String
  description      String?
  transactionItems TransactionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionItem {
  id            String      @id @default(cuid())
  amount        Int
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  description   String?
  donor         Donor?      @relation(fields: [donorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  donorId   String?
}

enum TransactionItemType {
  CREDIT
  DEBIT
  OTHER
}

model Reimbursement {
  id     String              @id @default(cuid())
  amount Int
  status ReimbursementStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReimbursementStatus {
  PENDING
  APPROVED
  REJECTED
}

model Donor {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  phone            String?
  transactionItems TransactionItem[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
